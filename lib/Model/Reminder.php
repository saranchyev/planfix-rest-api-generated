<?php
/**
 * Reminder
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Planfix REST API
 *
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Reminder Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Reminder implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Reminder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'comment_id' => 'int',
        'recurrence_id' => 'int',
        'data_tag_entry_key' => 'int',
        'reminder_date' => '\OpenAPI\Client\Model\TimePoint',
        'reminder_date_to_create' => '\OpenAPI\Client\Model\TimePoint',
        'reminded' => 'bool',
        'text' => 'string',
        'type' => 'string',
        'subtype' => 'string',
        'owner' => '\OpenAPI\Client\Model\PersonResponse',
        'recipients_roles' => 'string[]',
        'recipients_people' => '\OpenAPI\Client\Model\PeopleResponse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'comment_id' => null,
        'recurrence_id' => null,
        'data_tag_entry_key' => null,
        'reminder_date' => null,
        'reminder_date_to_create' => null,
        'reminded' => null,
        'text' => null,
        'type' => null,
        'subtype' => null,
        'owner' => null,
        'recipients_roles' => null,
        'recipients_people' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'comment_id' => false,
		'recurrence_id' => false,
		'data_tag_entry_key' => false,
		'reminder_date' => false,
		'reminder_date_to_create' => false,
		'reminded' => false,
		'text' => false,
		'type' => false,
		'subtype' => false,
		'owner' => false,
		'recipients_roles' => false,
		'recipients_people' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'comment_id' => 'commentId',
        'recurrence_id' => 'recurrenceId',
        'data_tag_entry_key' => 'dataTagEntryKey',
        'reminder_date' => 'reminderDate',
        'reminder_date_to_create' => 'reminderDateToCreate',
        'reminded' => 'reminded',
        'text' => 'text',
        'type' => 'type',
        'subtype' => 'subtype',
        'owner' => 'owner',
        'recipients_roles' => 'recipientsRoles',
        'recipients_people' => 'recipientsPeople'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'comment_id' => 'setCommentId',
        'recurrence_id' => 'setRecurrenceId',
        'data_tag_entry_key' => 'setDataTagEntryKey',
        'reminder_date' => 'setReminderDate',
        'reminder_date_to_create' => 'setReminderDateToCreate',
        'reminded' => 'setReminded',
        'text' => 'setText',
        'type' => 'setType',
        'subtype' => 'setSubtype',
        'owner' => 'setOwner',
        'recipients_roles' => 'setRecipientsRoles',
        'recipients_people' => 'setRecipientsPeople'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'comment_id' => 'getCommentId',
        'recurrence_id' => 'getRecurrenceId',
        'data_tag_entry_key' => 'getDataTagEntryKey',
        'reminder_date' => 'getReminderDate',
        'reminder_date_to_create' => 'getReminderDateToCreate',
        'reminded' => 'getReminded',
        'text' => 'getText',
        'type' => 'getType',
        'subtype' => 'getSubtype',
        'owner' => 'getOwner',
        'recipients_roles' => 'getRecipientsRoles',
        'recipients_people' => 'getRecipientsPeople'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_EXACT = 'Exact';
    public const TYPE_BEFORE = 'Before';
    public const TYPE_NONE = 'None';
    public const SUBTYPE_BEFORE_TASK_START = 'BeforeTaskStart';
    public const SUBTYPE_BEFORE_TASK_END = 'BeforeTaskEnd';
    public const SUBTYPE_BEFORE_DATA_TAG_START = 'BeforeDataTagStart';
    public const SUBTYPE_BEFORE_DATA_TAG_END = 'BeforeDataTagEnd';
    public const SUBTYPE_NONE = 'None';
    public const RECIPIENTS_ROLES_ASSIGNER = 'Assigner';
    public const RECIPIENTS_ROLES_PARTICIPANTS = 'Participants';
    public const RECIPIENTS_ROLES_ASSIGNEES = 'Assignees';
    public const RECIPIENTS_ROLES_AUDITORS = 'Auditors';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_EXACT,
            self::TYPE_BEFORE,
            self::TYPE_NONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubtypeAllowableValues()
    {
        return [
            self::SUBTYPE_BEFORE_TASK_START,
            self::SUBTYPE_BEFORE_TASK_END,
            self::SUBTYPE_BEFORE_DATA_TAG_START,
            self::SUBTYPE_BEFORE_DATA_TAG_END,
            self::SUBTYPE_NONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRecipientsRolesAllowableValues()
    {
        return [
            self::RECIPIENTS_ROLES_ASSIGNER,
            self::RECIPIENTS_ROLES_PARTICIPANTS,
            self::RECIPIENTS_ROLES_ASSIGNEES,
            self::RECIPIENTS_ROLES_AUDITORS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('comment_id', $data ?? [], null);
        $this->setIfExists('recurrence_id', $data ?? [], null);
        $this->setIfExists('data_tag_entry_key', $data ?? [], null);
        $this->setIfExists('reminder_date', $data ?? [], null);
        $this->setIfExists('reminder_date_to_create', $data ?? [], null);
        $this->setIfExists('reminded', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('subtype', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('recipients_roles', $data ?? [], null);
        $this->setIfExists('recipients_people', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubtypeAllowableValues();
        if (!is_null($this->container['subtype']) && !in_array($this->container['subtype'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'subtype', must be one of '%s'",
                $this->container['subtype'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets comment_id
     *
     * @return int|null
     */
    public function getCommentId()
    {
        return $this->container['comment_id'];
    }

    /**
     * Sets comment_id
     *
     * @param int|null $comment_id comment_id
     *
     * @return self
     */
    public function setCommentId($comment_id)
    {
        if (is_null($comment_id)) {
            throw new \InvalidArgumentException('non-nullable comment_id cannot be null');
        }
        $this->container['comment_id'] = $comment_id;

        return $this;
    }

    /**
     * Gets recurrence_id
     *
     * @return int|null
     */
    public function getRecurrenceId()
    {
        return $this->container['recurrence_id'];
    }

    /**
     * Sets recurrence_id
     *
     * @param int|null $recurrence_id recurrence_id
     *
     * @return self
     */
    public function setRecurrenceId($recurrence_id)
    {
        if (is_null($recurrence_id)) {
            throw new \InvalidArgumentException('non-nullable recurrence_id cannot be null');
        }
        $this->container['recurrence_id'] = $recurrence_id;

        return $this;
    }

    /**
     * Gets data_tag_entry_key
     *
     * @return int|null
     */
    public function getDataTagEntryKey()
    {
        return $this->container['data_tag_entry_key'];
    }

    /**
     * Sets data_tag_entry_key
     *
     * @param int|null $data_tag_entry_key data_tag_entry_key
     *
     * @return self
     */
    public function setDataTagEntryKey($data_tag_entry_key)
    {
        if (is_null($data_tag_entry_key)) {
            throw new \InvalidArgumentException('non-nullable data_tag_entry_key cannot be null');
        }
        $this->container['data_tag_entry_key'] = $data_tag_entry_key;

        return $this;
    }

    /**
     * Gets reminder_date
     *
     * @return \OpenAPI\Client\Model\TimePoint|null
     */
    public function getReminderDate()
    {
        return $this->container['reminder_date'];
    }

    /**
     * Sets reminder_date
     *
     * @param \OpenAPI\Client\Model\TimePoint|null $reminder_date reminder_date
     *
     * @return self
     */
    public function setReminderDate($reminder_date)
    {
        if (is_null($reminder_date)) {
            throw new \InvalidArgumentException('non-nullable reminder_date cannot be null');
        }
        $this->container['reminder_date'] = $reminder_date;

        return $this;
    }

    /**
     * Gets reminder_date_to_create
     *
     * @return \OpenAPI\Client\Model\TimePoint|null
     */
    public function getReminderDateToCreate()
    {
        return $this->container['reminder_date_to_create'];
    }

    /**
     * Sets reminder_date_to_create
     *
     * @param \OpenAPI\Client\Model\TimePoint|null $reminder_date_to_create reminder_date_to_create
     *
     * @return self
     */
    public function setReminderDateToCreate($reminder_date_to_create)
    {
        if (is_null($reminder_date_to_create)) {
            throw new \InvalidArgumentException('non-nullable reminder_date_to_create cannot be null');
        }
        $this->container['reminder_date_to_create'] = $reminder_date_to_create;

        return $this;
    }

    /**
     * Gets reminded
     *
     * @return bool|null
     */
    public function getReminded()
    {
        return $this->container['reminded'];
    }

    /**
     * Sets reminded
     *
     * @param bool|null $reminded reminded
     *
     * @return self
     */
    public function setReminded($reminded)
    {
        if (is_null($reminded)) {
            throw new \InvalidArgumentException('non-nullable reminded cannot be null');
        }
        $this->container['reminded'] = $reminded;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text text
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets subtype
     *
     * @return string|null
     */
    public function getSubtype()
    {
        return $this->container['subtype'];
    }

    /**
     * Sets subtype
     *
     * @param string|null $subtype subtype
     *
     * @return self
     */
    public function setSubtype($subtype)
    {
        if (is_null($subtype)) {
            throw new \InvalidArgumentException('non-nullable subtype cannot be null');
        }
        $allowedValues = $this->getSubtypeAllowableValues();
        if (!in_array($subtype, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'subtype', must be one of '%s'",
                    $subtype,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['subtype'] = $subtype;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \OpenAPI\Client\Model\PersonResponse|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \OpenAPI\Client\Model\PersonResponse|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets recipients_roles
     *
     * @return string[]|null
     */
    public function getRecipientsRoles()
    {
        return $this->container['recipients_roles'];
    }

    /**
     * Sets recipients_roles
     *
     * @param string[]|null $recipients_roles recipients_roles
     *
     * @return self
     */
    public function setRecipientsRoles($recipients_roles)
    {
        if (is_null($recipients_roles)) {
            throw new \InvalidArgumentException('non-nullable recipients_roles cannot be null');
        }
        $allowedValues = $this->getRecipientsRolesAllowableValues();
        if (array_diff($recipients_roles, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'recipients_roles', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['recipients_roles'] = $recipients_roles;

        return $this;
    }

    /**
     * Gets recipients_people
     *
     * @return \OpenAPI\Client\Model\PeopleResponse|null
     */
    public function getRecipientsPeople()
    {
        return $this->container['recipients_people'];
    }

    /**
     * Sets recipients_people
     *
     * @param \OpenAPI\Client\Model\PeopleResponse|null $recipients_people recipients_people
     *
     * @return self
     */
    public function setRecipientsPeople($recipients_people)
    {
        if (is_null($recipients_people)) {
            throw new \InvalidArgumentException('non-nullable recipients_people cannot be null');
        }
        $this->container['recipients_people'] = $recipients_people;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


