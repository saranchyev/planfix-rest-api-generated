<?php
/**
 * PostContactImportRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Planfix REST API
 *
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PostContactImportRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PostContactImportRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'post_contact_import_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'silent' => 'bool',
        'source_id' => 'string',
        'contact_template_id' => 'int',
        'company_template_id' => 'int',
        'option_import_duplicate' => 'string',
        'option_import_unique_field' => 'string',
        'option_import_unique_default_field' => 'string',
        'contacts' => '\OpenAPI\Client\Model\ContactRequest[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'silent' => null,
        'source_id' => 'uuid',
        'contact_template_id' => null,
        'company_template_id' => null,
        'option_import_duplicate' => null,
        'option_import_unique_field' => null,
        'option_import_unique_default_field' => null,
        'contacts' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'silent' => false,
		'source_id' => false,
		'contact_template_id' => false,
		'company_template_id' => false,
		'option_import_duplicate' => false,
		'option_import_unique_field' => false,
		'option_import_unique_default_field' => false,
		'contacts' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'silent' => 'silent',
        'source_id' => 'sourceId',
        'contact_template_id' => 'contactTemplateId',
        'company_template_id' => 'companyTemplateId',
        'option_import_duplicate' => 'optionImportDuplicate',
        'option_import_unique_field' => 'optionImportUniqueField',
        'option_import_unique_default_field' => 'optionImportUniqueDefaultField',
        'contacts' => 'contacts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'silent' => 'setSilent',
        'source_id' => 'setSourceId',
        'contact_template_id' => 'setContactTemplateId',
        'company_template_id' => 'setCompanyTemplateId',
        'option_import_duplicate' => 'setOptionImportDuplicate',
        'option_import_unique_field' => 'setOptionImportUniqueField',
        'option_import_unique_default_field' => 'setOptionImportUniqueDefaultField',
        'contacts' => 'setContacts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'silent' => 'getSilent',
        'source_id' => 'getSourceId',
        'contact_template_id' => 'getContactTemplateId',
        'company_template_id' => 'getCompanyTemplateId',
        'option_import_duplicate' => 'getOptionImportDuplicate',
        'option_import_unique_field' => 'getOptionImportUniqueField',
        'option_import_unique_default_field' => 'getOptionImportUniqueDefaultField',
        'contacts' => 'getContacts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('silent', $data ?? [], false);
        $this->setIfExists('source_id', $data ?? [], null);
        $this->setIfExists('contact_template_id', $data ?? [], null);
        $this->setIfExists('company_template_id', $data ?? [], null);
        $this->setIfExists('option_import_duplicate', $data ?? [], null);
        $this->setIfExists('option_import_unique_field', $data ?? [], null);
        $this->setIfExists('option_import_unique_default_field', $data ?? [], null);
        $this->setIfExists('contacts', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets silent
     *
     * @return bool|null
     */
    public function getSilent()
    {
        return $this->container['silent'];
    }

    /**
     * Sets silent
     *
     * @param bool|null $silent Silent mode
     *
     * @return self
     */
    public function setSilent($silent)
    {
        if (is_null($silent)) {
            throw new \InvalidArgumentException('non-nullable silent cannot be null');
        }
        $this->container['silent'] = $silent;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return string|null
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param string|null $source_id source_id
     *
     * @return self
     */
    public function setSourceId($source_id)
    {
        if (is_null($source_id)) {
            throw new \InvalidArgumentException('non-nullable source_id cannot be null');
        }
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets contact_template_id
     *
     * @return int|null
     */
    public function getContactTemplateId()
    {
        return $this->container['contact_template_id'];
    }

    /**
     * Sets contact_template_id
     *
     * @param int|null $contact_template_id contact_template_id
     *
     * @return self
     */
    public function setContactTemplateId($contact_template_id)
    {
        if (is_null($contact_template_id)) {
            throw new \InvalidArgumentException('non-nullable contact_template_id cannot be null');
        }
        $this->container['contact_template_id'] = $contact_template_id;

        return $this;
    }

    /**
     * Gets company_template_id
     *
     * @return int|null
     */
    public function getCompanyTemplateId()
    {
        return $this->container['company_template_id'];
    }

    /**
     * Sets company_template_id
     *
     * @param int|null $company_template_id company_template_id
     *
     * @return self
     */
    public function setCompanyTemplateId($company_template_id)
    {
        if (is_null($company_template_id)) {
            throw new \InvalidArgumentException('non-nullable company_template_id cannot be null');
        }
        $this->container['company_template_id'] = $company_template_id;

        return $this;
    }

    /**
     * Gets option_import_duplicate
     *
     * @return string|null
     */
    public function getOptionImportDuplicate()
    {
        return $this->container['option_import_duplicate'];
    }

    /**
     * Sets option_import_duplicate
     *
     * @param string|null $option_import_duplicate Enum: ignore, update, none
     *
     * @return self
     */
    public function setOptionImportDuplicate($option_import_duplicate)
    {
        if (is_null($option_import_duplicate)) {
            throw new \InvalidArgumentException('non-nullable option_import_duplicate cannot be null');
        }
        $this->container['option_import_duplicate'] = $option_import_duplicate;

        return $this;
    }

    /**
     * Gets option_import_unique_field
     *
     * @return string|null
     */
    public function getOptionImportUniqueField()
    {
        return $this->container['option_import_unique_field'];
    }

    /**
     * Sets option_import_unique_field
     *
     * @param string|null $option_import_unique_field Enum: email-phone-name-ifnot, email-phone-name, email-phone, phone, name, email-and-phone-and-name, number, custom  OR custom:{fieldId}
     *
     * @return self
     */
    public function setOptionImportUniqueField($option_import_unique_field)
    {
        if (is_null($option_import_unique_field)) {
            throw new \InvalidArgumentException('non-nullable option_import_unique_field cannot be null');
        }
        $this->container['option_import_unique_field'] = $option_import_unique_field;

        return $this;
    }

    /**
     * Gets option_import_unique_default_field
     *
     * @return string|null
     */
    public function getOptionImportUniqueDefaultField()
    {
        return $this->container['option_import_unique_default_field'];
    }

    /**
     * Sets option_import_unique_default_field
     *
     * @param string|null $option_import_unique_default_field Enum: name, email-phone-name
     *
     * @return self
     */
    public function setOptionImportUniqueDefaultField($option_import_unique_default_field)
    {
        if (is_null($option_import_unique_default_field)) {
            throw new \InvalidArgumentException('non-nullable option_import_unique_default_field cannot be null');
        }
        $this->container['option_import_unique_default_field'] = $option_import_unique_default_field;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \OpenAPI\Client\Model\ContactRequest[]|null
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \OpenAPI\Client\Model\ContactRequest[]|null $contacts contacts
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        if (is_null($contacts)) {
            throw new \InvalidArgumentException('non-nullable contacts cannot be null');
        }
        $this->container['contacts'] = $contacts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


