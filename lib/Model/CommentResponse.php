<?php
/**
 * CommentResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Planfix REST API
 *
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CommentResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CommentResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CommentResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'source_object_id' => 'string',
        'source_data_version' => 'string',
        'date_time' => '\OpenAPI\Client\Model\TimePoint',
        'type' => 'string',
        'from_type' => 'string',
        'description' => 'string',
        'task' => '\OpenAPI\Client\Model\BaseEntity',
        'project' => '\OpenAPI\Client\Model\BaseEntity',
        'contact' => '\OpenAPI\Client\Model\PersonResponse',
        'owner' => '\OpenAPI\Client\Model\PersonResponse',
        'is_deleted' => 'bool',
        'is_pinned' => 'bool',
        'is_hidden' => 'bool',
        'is_not_read' => 'bool',
        'recipients' => '\OpenAPI\Client\Model\PeopleResponse',
        'reminders' => '\OpenAPI\Client\Model\Reminder[]',
        'data_tags' => '\OpenAPI\Client\Model\CommentResponseDataTagsInner[]',
        'files' => '\OpenAPI\Client\Model\FileResponse[]',
        'change_task_start_date' => '\OpenAPI\Client\Model\ChangeDate',
        'change_task_expect_date' => '\OpenAPI\Client\Model\ChangeDate',
        'change_status' => '\OpenAPI\Client\Model\CommentResponseChangeStatus'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'source_object_id' => 'uuid',
        'source_data_version' => null,
        'date_time' => null,
        'type' => null,
        'from_type' => null,
        'description' => null,
        'task' => null,
        'project' => null,
        'contact' => null,
        'owner' => null,
        'is_deleted' => null,
        'is_pinned' => null,
        'is_hidden' => null,
        'is_not_read' => null,
        'recipients' => null,
        'reminders' => null,
        'data_tags' => null,
        'files' => null,
        'change_task_start_date' => null,
        'change_task_expect_date' => null,
        'change_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'source_object_id' => false,
		'source_data_version' => false,
		'date_time' => false,
		'type' => false,
		'from_type' => false,
		'description' => false,
		'task' => false,
		'project' => false,
		'contact' => false,
		'owner' => false,
		'is_deleted' => false,
		'is_pinned' => false,
		'is_hidden' => false,
		'is_not_read' => false,
		'recipients' => false,
		'reminders' => false,
		'data_tags' => false,
		'files' => false,
		'change_task_start_date' => false,
		'change_task_expect_date' => false,
		'change_status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'source_object_id' => 'sourceObjectId',
        'source_data_version' => 'sourceDataVersion',
        'date_time' => 'dateTime',
        'type' => 'type',
        'from_type' => 'fromType',
        'description' => 'description',
        'task' => 'task',
        'project' => 'project',
        'contact' => 'contact',
        'owner' => 'owner',
        'is_deleted' => 'isDeleted',
        'is_pinned' => 'isPinned',
        'is_hidden' => 'isHidden',
        'is_not_read' => 'isNotRead',
        'recipients' => 'recipients',
        'reminders' => 'reminders',
        'data_tags' => 'dataTags',
        'files' => 'files',
        'change_task_start_date' => 'changeTaskStartDate',
        'change_task_expect_date' => 'changeTaskExpectDate',
        'change_status' => 'changeStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'source_object_id' => 'setSourceObjectId',
        'source_data_version' => 'setSourceDataVersion',
        'date_time' => 'setDateTime',
        'type' => 'setType',
        'from_type' => 'setFromType',
        'description' => 'setDescription',
        'task' => 'setTask',
        'project' => 'setProject',
        'contact' => 'setContact',
        'owner' => 'setOwner',
        'is_deleted' => 'setIsDeleted',
        'is_pinned' => 'setIsPinned',
        'is_hidden' => 'setIsHidden',
        'is_not_read' => 'setIsNotRead',
        'recipients' => 'setRecipients',
        'reminders' => 'setReminders',
        'data_tags' => 'setDataTags',
        'files' => 'setFiles',
        'change_task_start_date' => 'setChangeTaskStartDate',
        'change_task_expect_date' => 'setChangeTaskExpectDate',
        'change_status' => 'setChangeStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'source_object_id' => 'getSourceObjectId',
        'source_data_version' => 'getSourceDataVersion',
        'date_time' => 'getDateTime',
        'type' => 'getType',
        'from_type' => 'getFromType',
        'description' => 'getDescription',
        'task' => 'getTask',
        'project' => 'getProject',
        'contact' => 'getContact',
        'owner' => 'getOwner',
        'is_deleted' => 'getIsDeleted',
        'is_pinned' => 'getIsPinned',
        'is_hidden' => 'getIsHidden',
        'is_not_read' => 'getIsNotRead',
        'recipients' => 'getRecipients',
        'reminders' => 'getReminders',
        'data_tags' => 'getDataTags',
        'files' => 'getFiles',
        'change_task_start_date' => 'getChangeTaskStartDate',
        'change_task_expect_date' => 'getChangeTaskExpectDate',
        'change_status' => 'getChangeStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_COMMENT = 'Comment';
    public const TYPE_REMINDER = 'Reminder';
    public const TYPE_NONE = 'None';
    public const FROM_TYPE_PLANFIX = 'Planfix';
    public const FROM_TYPE_TELEGRAM = 'Telegram';
    public const FROM_TYPE_FACEBOOK = 'Facebook';
    public const FROM_TYPE_VIBER = 'Viber';
    public const FROM_TYPE_WHATS_APP = 'WhatsApp';
    public const FROM_TYPE_MOBILE = 'Mobile';
    public const FROM_TYPE_EMAIL = 'Email';
    public const FROM_TYPE_CHARTA = 'Charta';
    public const FROM_TYPE_SKYPE = 'Skype';
    public const FROM_TYPE_YANDEX_CHAT = 'YandexChat';
    public const FROM_TYPE_AVITO = 'Avito';
    public const FROM_TYPE_WEB_CHAT_API = 'WebChatApi';
    public const FROM_TYPE_NONE = 'None';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_COMMENT,
            self::TYPE_REMINDER,
            self::TYPE_NONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFromTypeAllowableValues()
    {
        return [
            self::FROM_TYPE_PLANFIX,
            self::FROM_TYPE_TELEGRAM,
            self::FROM_TYPE_FACEBOOK,
            self::FROM_TYPE_VIBER,
            self::FROM_TYPE_WHATS_APP,
            self::FROM_TYPE_MOBILE,
            self::FROM_TYPE_EMAIL,
            self::FROM_TYPE_CHARTA,
            self::FROM_TYPE_SKYPE,
            self::FROM_TYPE_YANDEX_CHAT,
            self::FROM_TYPE_AVITO,
            self::FROM_TYPE_WEB_CHAT_API,
            self::FROM_TYPE_NONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('source_object_id', $data ?? [], null);
        $this->setIfExists('source_data_version', $data ?? [], null);
        $this->setIfExists('date_time', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('from_type', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('task', $data ?? [], null);
        $this->setIfExists('project', $data ?? [], null);
        $this->setIfExists('contact', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
        $this->setIfExists('is_pinned', $data ?? [], null);
        $this->setIfExists('is_hidden', $data ?? [], null);
        $this->setIfExists('is_not_read', $data ?? [], null);
        $this->setIfExists('recipients', $data ?? [], null);
        $this->setIfExists('reminders', $data ?? [], null);
        $this->setIfExists('data_tags', $data ?? [], null);
        $this->setIfExists('files', $data ?? [], null);
        $this->setIfExists('change_task_start_date', $data ?? [], null);
        $this->setIfExists('change_task_expect_date', $data ?? [], null);
        $this->setIfExists('change_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['source_data_version']) && (mb_strlen($this->container['source_data_version']) > 100)) {
            $invalidProperties[] = "invalid value for 'source_data_version', the character length must be smaller than or equal to 100.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFromTypeAllowableValues();
        if (!is_null($this->container['from_type']) && !in_array($this->container['from_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'from_type', must be one of '%s'",
                $this->container['from_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets source_object_id
     *
     * @return string|null
     */
    public function getSourceObjectId()
    {
        return $this->container['source_object_id'];
    }

    /**
     * Sets source_object_id
     *
     * @param string|null $source_object_id source_object_id
     *
     * @return self
     */
    public function setSourceObjectId($source_object_id)
    {
        if (is_null($source_object_id)) {
            throw new \InvalidArgumentException('non-nullable source_object_id cannot be null');
        }
        $this->container['source_object_id'] = $source_object_id;

        return $this;
    }

    /**
     * Gets source_data_version
     *
     * @return string|null
     */
    public function getSourceDataVersion()
    {
        return $this->container['source_data_version'];
    }

    /**
     * Sets source_data_version
     *
     * @param string|null $source_data_version source_data_version
     *
     * @return self
     */
    public function setSourceDataVersion($source_data_version)
    {
        if (is_null($source_data_version)) {
            throw new \InvalidArgumentException('non-nullable source_data_version cannot be null');
        }
        if ((mb_strlen($source_data_version) > 100)) {
            throw new \InvalidArgumentException('invalid length for $source_data_version when calling CommentResponse., must be smaller than or equal to 100.');
        }

        $this->container['source_data_version'] = $source_data_version;

        return $this;
    }

    /**
     * Gets date_time
     *
     * @return \OpenAPI\Client\Model\TimePoint|null
     */
    public function getDateTime()
    {
        return $this->container['date_time'];
    }

    /**
     * Sets date_time
     *
     * @param \OpenAPI\Client\Model\TimePoint|null $date_time date_time
     *
     * @return self
     */
    public function setDateTime($date_time)
    {
        if (is_null($date_time)) {
            throw new \InvalidArgumentException('non-nullable date_time cannot be null');
        }
        $this->container['date_time'] = $date_time;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets from_type
     *
     * @return string|null
     */
    public function getFromType()
    {
        return $this->container['from_type'];
    }

    /**
     * Sets from_type
     *
     * @param string|null $from_type from_type
     *
     * @return self
     */
    public function setFromType($from_type)
    {
        if (is_null($from_type)) {
            throw new \InvalidArgumentException('non-nullable from_type cannot be null');
        }
        $allowedValues = $this->getFromTypeAllowableValues();
        if (!in_array($from_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'from_type', must be one of '%s'",
                    $from_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['from_type'] = $from_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets task
     *
     * @return \OpenAPI\Client\Model\BaseEntity|null
     */
    public function getTask()
    {
        return $this->container['task'];
    }

    /**
     * Sets task
     *
     * @param \OpenAPI\Client\Model\BaseEntity|null $task task
     *
     * @return self
     */
    public function setTask($task)
    {
        if (is_null($task)) {
            throw new \InvalidArgumentException('non-nullable task cannot be null');
        }
        $this->container['task'] = $task;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \OpenAPI\Client\Model\BaseEntity|null
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \OpenAPI\Client\Model\BaseEntity|null $project project
     *
     * @return self
     */
    public function setProject($project)
    {
        if (is_null($project)) {
            throw new \InvalidArgumentException('non-nullable project cannot be null');
        }
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \OpenAPI\Client\Model\PersonResponse|null
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \OpenAPI\Client\Model\PersonResponse|null $contact contact
     *
     * @return self
     */
    public function setContact($contact)
    {
        if (is_null($contact)) {
            throw new \InvalidArgumentException('non-nullable contact cannot be null');
        }
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \OpenAPI\Client\Model\PersonResponse|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \OpenAPI\Client\Model\PersonResponse|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted is_deleted
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {
        if (is_null($is_deleted)) {
            throw new \InvalidArgumentException('non-nullable is_deleted cannot be null');
        }
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets is_pinned
     *
     * @return bool|null
     */
    public function getIsPinned()
    {
        return $this->container['is_pinned'];
    }

    /**
     * Sets is_pinned
     *
     * @param bool|null $is_pinned is_pinned
     *
     * @return self
     */
    public function setIsPinned($is_pinned)
    {
        if (is_null($is_pinned)) {
            throw new \InvalidArgumentException('non-nullable is_pinned cannot be null');
        }
        $this->container['is_pinned'] = $is_pinned;

        return $this;
    }

    /**
     * Gets is_hidden
     *
     * @return bool|null
     */
    public function getIsHidden()
    {
        return $this->container['is_hidden'];
    }

    /**
     * Sets is_hidden
     *
     * @param bool|null $is_hidden is_hidden
     *
     * @return self
     */
    public function setIsHidden($is_hidden)
    {
        if (is_null($is_hidden)) {
            throw new \InvalidArgumentException('non-nullable is_hidden cannot be null');
        }
        $this->container['is_hidden'] = $is_hidden;

        return $this;
    }

    /**
     * Gets is_not_read
     *
     * @return bool|null
     */
    public function getIsNotRead()
    {
        return $this->container['is_not_read'];
    }

    /**
     * Sets is_not_read
     *
     * @param bool|null $is_not_read is_not_read
     *
     * @return self
     */
    public function setIsNotRead($is_not_read)
    {
        if (is_null($is_not_read)) {
            throw new \InvalidArgumentException('non-nullable is_not_read cannot be null');
        }
        $this->container['is_not_read'] = $is_not_read;

        return $this;
    }

    /**
     * Gets recipients
     *
     * @return \OpenAPI\Client\Model\PeopleResponse|null
     */
    public function getRecipients()
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     *
     * @param \OpenAPI\Client\Model\PeopleResponse|null $recipients recipients
     *
     * @return self
     */
    public function setRecipients($recipients)
    {
        if (is_null($recipients)) {
            throw new \InvalidArgumentException('non-nullable recipients cannot be null');
        }
        $this->container['recipients'] = $recipients;

        return $this;
    }

    /**
     * Gets reminders
     *
     * @return \OpenAPI\Client\Model\Reminder[]|null
     */
    public function getReminders()
    {
        return $this->container['reminders'];
    }

    /**
     * Sets reminders
     *
     * @param \OpenAPI\Client\Model\Reminder[]|null $reminders reminders
     *
     * @return self
     */
    public function setReminders($reminders)
    {
        if (is_null($reminders)) {
            throw new \InvalidArgumentException('non-nullable reminders cannot be null');
        }
        $this->container['reminders'] = $reminders;

        return $this;
    }

    /**
     * Gets data_tags
     *
     * @return \OpenAPI\Client\Model\CommentResponseDataTagsInner[]|null
     */
    public function getDataTags()
    {
        return $this->container['data_tags'];
    }

    /**
     * Sets data_tags
     *
     * @param \OpenAPI\Client\Model\CommentResponseDataTagsInner[]|null $data_tags data_tags
     *
     * @return self
     */
    public function setDataTags($data_tags)
    {
        if (is_null($data_tags)) {
            throw new \InvalidArgumentException('non-nullable data_tags cannot be null');
        }
        $this->container['data_tags'] = $data_tags;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \OpenAPI\Client\Model\FileResponse[]|null
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \OpenAPI\Client\Model\FileResponse[]|null $files files
     *
     * @return self
     */
    public function setFiles($files)
    {
        if (is_null($files)) {
            throw new \InvalidArgumentException('non-nullable files cannot be null');
        }
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets change_task_start_date
     *
     * @return \OpenAPI\Client\Model\ChangeDate|null
     */
    public function getChangeTaskStartDate()
    {
        return $this->container['change_task_start_date'];
    }

    /**
     * Sets change_task_start_date
     *
     * @param \OpenAPI\Client\Model\ChangeDate|null $change_task_start_date change_task_start_date
     *
     * @return self
     */
    public function setChangeTaskStartDate($change_task_start_date)
    {
        if (is_null($change_task_start_date)) {
            throw new \InvalidArgumentException('non-nullable change_task_start_date cannot be null');
        }
        $this->container['change_task_start_date'] = $change_task_start_date;

        return $this;
    }

    /**
     * Gets change_task_expect_date
     *
     * @return \OpenAPI\Client\Model\ChangeDate|null
     */
    public function getChangeTaskExpectDate()
    {
        return $this->container['change_task_expect_date'];
    }

    /**
     * Sets change_task_expect_date
     *
     * @param \OpenAPI\Client\Model\ChangeDate|null $change_task_expect_date change_task_expect_date
     *
     * @return self
     */
    public function setChangeTaskExpectDate($change_task_expect_date)
    {
        if (is_null($change_task_expect_date)) {
            throw new \InvalidArgumentException('non-nullable change_task_expect_date cannot be null');
        }
        $this->container['change_task_expect_date'] = $change_task_expect_date;

        return $this;
    }

    /**
     * Gets change_status
     *
     * @return \OpenAPI\Client\Model\CommentResponseChangeStatus|null
     */
    public function getChangeStatus()
    {
        return $this->container['change_status'];
    }

    /**
     * Sets change_status
     *
     * @param \OpenAPI\Client\Model\CommentResponseChangeStatus|null $change_status change_status
     *
     * @return self
     */
    public function setChangeStatus($change_status)
    {
        if (is_null($change_status)) {
            throw new \InvalidArgumentException('non-nullable change_status cannot be null');
        }
        $this->container['change_status'] = $change_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


