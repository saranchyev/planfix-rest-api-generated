<?php
/**
 * TaskCreateRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Planfix REST API
 *
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.0.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TaskCreateRequest Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TaskCreateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TaskCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'source_object_id' => 'string',
        'source_data_version' => 'string',
        'name' => 'string',
        'description' => 'string',
        'priority' => 'string',
        'status' => '\OpenAPI\Client\Model\BaseEntity',
        'process_id' => 'int',
        'result_checking' => 'bool',
        'assigner' => '\OpenAPI\Client\Model\PersonRequest',
        'parent' => '\OpenAPI\Client\Model\BaseEntity',
        'template' => '\OpenAPI\Client\Model\BaseEntity',
        'project' => '\OpenAPI\Client\Model\BaseEntity',
        'counterparty' => '\OpenAPI\Client\Model\PersonRequest',
        'date_time' => '\OpenAPI\Client\Model\TimePoint',
        'start_date_time' => '\OpenAPI\Client\Model\TimePoint',
        'end_date_time' => '\OpenAPI\Client\Model\TimePoint',
        'delayed_till_date' => '\OpenAPI\Client\Model\TimePoint',
        'duration' => 'int',
        'duration_unit' => 'string',
        'duration_type' => 'string',
        'overdue' => 'bool',
        'close_to_dead_line' => 'bool',
        'not_accepted_in_time' => 'bool',
        'in_favorites' => 'bool',
        'is_summary' => 'bool',
        'is_sequential' => 'bool',
        'assignees' => '\OpenAPI\Client\Model\PeopleRequest',
        'participants' => '\OpenAPI\Client\Model\PeopleRequest',
        'auditors' => '\OpenAPI\Client\Model\PeopleRequest',
        'is_deleted' => 'bool',
        'custom_field_data' => '\OpenAPI\Client\Model\CustomFieldValueRequest[]',
        'files' => '\OpenAPI\Client\Model\FileRequest[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'source_object_id' => 'uuid',
        'source_data_version' => null,
        'name' => null,
        'description' => null,
        'priority' => null,
        'status' => null,
        'process_id' => 'int64',
        'result_checking' => null,
        'assigner' => null,
        'parent' => null,
        'template' => null,
        'project' => null,
        'counterparty' => null,
        'date_time' => null,
        'start_date_time' => null,
        'end_date_time' => null,
        'delayed_till_date' => null,
        'duration' => 'int64',
        'duration_unit' => null,
        'duration_type' => null,
        'overdue' => null,
        'close_to_dead_line' => null,
        'not_accepted_in_time' => null,
        'in_favorites' => null,
        'is_summary' => null,
        'is_sequential' => null,
        'assignees' => null,
        'participants' => null,
        'auditors' => null,
        'is_deleted' => null,
        'custom_field_data' => null,
        'files' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'source_object_id' => false,
		'source_data_version' => false,
		'name' => false,
		'description' => false,
		'priority' => false,
		'status' => false,
		'process_id' => false,
		'result_checking' => false,
		'assigner' => false,
		'parent' => false,
		'template' => false,
		'project' => false,
		'counterparty' => false,
		'date_time' => false,
		'start_date_time' => false,
		'end_date_time' => false,
		'delayed_till_date' => false,
		'duration' => false,
		'duration_unit' => false,
		'duration_type' => false,
		'overdue' => false,
		'close_to_dead_line' => false,
		'not_accepted_in_time' => false,
		'in_favorites' => false,
		'is_summary' => false,
		'is_sequential' => false,
		'assignees' => false,
		'participants' => false,
		'auditors' => false,
		'is_deleted' => false,
		'custom_field_data' => false,
		'files' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'source_object_id' => 'sourceObjectId',
        'source_data_version' => 'sourceDataVersion',
        'name' => 'name',
        'description' => 'description',
        'priority' => 'priority',
        'status' => 'status',
        'process_id' => 'processId',
        'result_checking' => 'resultChecking',
        'assigner' => 'assigner',
        'parent' => 'parent',
        'template' => 'template',
        'project' => 'project',
        'counterparty' => 'counterparty',
        'date_time' => 'dateTime',
        'start_date_time' => 'startDateTime',
        'end_date_time' => 'endDateTime',
        'delayed_till_date' => 'delayedTillDate',
        'duration' => 'duration',
        'duration_unit' => 'durationUnit',
        'duration_type' => 'durationType',
        'overdue' => 'overdue',
        'close_to_dead_line' => 'closeToDeadLine',
        'not_accepted_in_time' => 'notAcceptedInTime',
        'in_favorites' => 'inFavorites',
        'is_summary' => 'isSummary',
        'is_sequential' => 'isSequential',
        'assignees' => 'assignees',
        'participants' => 'participants',
        'auditors' => 'auditors',
        'is_deleted' => 'isDeleted',
        'custom_field_data' => 'customFieldData',
        'files' => 'files'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'source_object_id' => 'setSourceObjectId',
        'source_data_version' => 'setSourceDataVersion',
        'name' => 'setName',
        'description' => 'setDescription',
        'priority' => 'setPriority',
        'status' => 'setStatus',
        'process_id' => 'setProcessId',
        'result_checking' => 'setResultChecking',
        'assigner' => 'setAssigner',
        'parent' => 'setParent',
        'template' => 'setTemplate',
        'project' => 'setProject',
        'counterparty' => 'setCounterparty',
        'date_time' => 'setDateTime',
        'start_date_time' => 'setStartDateTime',
        'end_date_time' => 'setEndDateTime',
        'delayed_till_date' => 'setDelayedTillDate',
        'duration' => 'setDuration',
        'duration_unit' => 'setDurationUnit',
        'duration_type' => 'setDurationType',
        'overdue' => 'setOverdue',
        'close_to_dead_line' => 'setCloseToDeadLine',
        'not_accepted_in_time' => 'setNotAcceptedInTime',
        'in_favorites' => 'setInFavorites',
        'is_summary' => 'setIsSummary',
        'is_sequential' => 'setIsSequential',
        'assignees' => 'setAssignees',
        'participants' => 'setParticipants',
        'auditors' => 'setAuditors',
        'is_deleted' => 'setIsDeleted',
        'custom_field_data' => 'setCustomFieldData',
        'files' => 'setFiles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'source_object_id' => 'getSourceObjectId',
        'source_data_version' => 'getSourceDataVersion',
        'name' => 'getName',
        'description' => 'getDescription',
        'priority' => 'getPriority',
        'status' => 'getStatus',
        'process_id' => 'getProcessId',
        'result_checking' => 'getResultChecking',
        'assigner' => 'getAssigner',
        'parent' => 'getParent',
        'template' => 'getTemplate',
        'project' => 'getProject',
        'counterparty' => 'getCounterparty',
        'date_time' => 'getDateTime',
        'start_date_time' => 'getStartDateTime',
        'end_date_time' => 'getEndDateTime',
        'delayed_till_date' => 'getDelayedTillDate',
        'duration' => 'getDuration',
        'duration_unit' => 'getDurationUnit',
        'duration_type' => 'getDurationType',
        'overdue' => 'getOverdue',
        'close_to_dead_line' => 'getCloseToDeadLine',
        'not_accepted_in_time' => 'getNotAcceptedInTime',
        'in_favorites' => 'getInFavorites',
        'is_summary' => 'getIsSummary',
        'is_sequential' => 'getIsSequential',
        'assignees' => 'getAssignees',
        'participants' => 'getParticipants',
        'auditors' => 'getAuditors',
        'is_deleted' => 'getIsDeleted',
        'custom_field_data' => 'getCustomFieldData',
        'files' => 'getFiles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PRIORITY_NOT_URGENT = 'NotUrgent';
    public const PRIORITY_URGENT = 'Urgent';
    public const DURATION_UNIT_MINUTE = 'Minute';
    public const DURATION_UNIT_HOUR = 'Hour';
    public const DURATION_UNIT_DAY = 'Day';
    public const DURATION_UNIT_WEEK = 'Week';
    public const DURATION_UNIT_MONTH = 'Month';
    public const DURATION_TYPE_CALENDAR_DAYS = 'CalendarDays';
    public const DURATION_TYPE_WORKER_DAYS = 'WorkerDays';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriorityAllowableValues()
    {
        return [
            self::PRIORITY_NOT_URGENT,
            self::PRIORITY_URGENT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDurationUnitAllowableValues()
    {
        return [
            self::DURATION_UNIT_MINUTE,
            self::DURATION_UNIT_HOUR,
            self::DURATION_UNIT_DAY,
            self::DURATION_UNIT_WEEK,
            self::DURATION_UNIT_MONTH,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDurationTypeAllowableValues()
    {
        return [
            self::DURATION_TYPE_CALENDAR_DAYS,
            self::DURATION_TYPE_WORKER_DAYS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('source_object_id', $data ?? [], null);
        $this->setIfExists('source_data_version', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('priority', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('process_id', $data ?? [], null);
        $this->setIfExists('result_checking', $data ?? [], null);
        $this->setIfExists('assigner', $data ?? [], null);
        $this->setIfExists('parent', $data ?? [], null);
        $this->setIfExists('template', $data ?? [], null);
        $this->setIfExists('project', $data ?? [], null);
        $this->setIfExists('counterparty', $data ?? [], null);
        $this->setIfExists('date_time', $data ?? [], null);
        $this->setIfExists('start_date_time', $data ?? [], null);
        $this->setIfExists('end_date_time', $data ?? [], null);
        $this->setIfExists('delayed_till_date', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('duration_unit', $data ?? [], null);
        $this->setIfExists('duration_type', $data ?? [], null);
        $this->setIfExists('overdue', $data ?? [], null);
        $this->setIfExists('close_to_dead_line', $data ?? [], null);
        $this->setIfExists('not_accepted_in_time', $data ?? [], null);
        $this->setIfExists('in_favorites', $data ?? [], null);
        $this->setIfExists('is_summary', $data ?? [], null);
        $this->setIfExists('is_sequential', $data ?? [], null);
        $this->setIfExists('assignees', $data ?? [], null);
        $this->setIfExists('participants', $data ?? [], null);
        $this->setIfExists('auditors', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
        $this->setIfExists('custom_field_data', $data ?? [], null);
        $this->setIfExists('files', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['source_data_version']) && (mb_strlen($this->container['source_data_version']) > 100)) {
            $invalidProperties[] = "invalid value for 'source_data_version', the character length must be smaller than or equal to 100.";
        }

        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($this->container['priority']) && !in_array($this->container['priority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'priority', must be one of '%s'",
                $this->container['priority'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDurationUnitAllowableValues();
        if (!is_null($this->container['duration_unit']) && !in_array($this->container['duration_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'duration_unit', must be one of '%s'",
                $this->container['duration_unit'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDurationTypeAllowableValues();
        if (!is_null($this->container['duration_type']) && !in_array($this->container['duration_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'duration_type', must be one of '%s'",
                $this->container['duration_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets source_object_id
     *
     * @return string|null
     */
    public function getSourceObjectId()
    {
        return $this->container['source_object_id'];
    }

    /**
     * Sets source_object_id
     *
     * @param string|null $source_object_id source_object_id
     *
     * @return self
     */
    public function setSourceObjectId($source_object_id)
    {
        if (is_null($source_object_id)) {
            throw new \InvalidArgumentException('non-nullable source_object_id cannot be null');
        }
        $this->container['source_object_id'] = $source_object_id;

        return $this;
    }

    /**
     * Gets source_data_version
     *
     * @return string|null
     */
    public function getSourceDataVersion()
    {
        return $this->container['source_data_version'];
    }

    /**
     * Sets source_data_version
     *
     * @param string|null $source_data_version source_data_version
     *
     * @return self
     */
    public function setSourceDataVersion($source_data_version)
    {
        if (is_null($source_data_version)) {
            throw new \InvalidArgumentException('non-nullable source_data_version cannot be null');
        }
        if ((mb_strlen($source_data_version) > 100)) {
            throw new \InvalidArgumentException('invalid length for $source_data_version when calling TaskCreateRequest., must be smaller than or equal to 100.');
        }

        $this->container['source_data_version'] = $source_data_version;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string|null $priority priority
     *
     * @return self
     */
    public function setPriority($priority)
    {
        if (is_null($priority)) {
            throw new \InvalidArgumentException('non-nullable priority cannot be null');
        }
        $allowedValues = $this->getPriorityAllowableValues();
        if (!in_array($priority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'priority', must be one of '%s'",
                    $priority,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\BaseEntity|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\BaseEntity|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets process_id
     *
     * @return int|null
     */
    public function getProcessId()
    {
        return $this->container['process_id'];
    }

    /**
     * Sets process_id
     *
     * @param int|null $process_id process_id
     *
     * @return self
     */
    public function setProcessId($process_id)
    {
        if (is_null($process_id)) {
            throw new \InvalidArgumentException('non-nullable process_id cannot be null');
        }
        $this->container['process_id'] = $process_id;

        return $this;
    }

    /**
     * Gets result_checking
     *
     * @return bool|null
     */
    public function getResultChecking()
    {
        return $this->container['result_checking'];
    }

    /**
     * Sets result_checking
     *
     * @param bool|null $result_checking result_checking
     *
     * @return self
     */
    public function setResultChecking($result_checking)
    {
        if (is_null($result_checking)) {
            throw new \InvalidArgumentException('non-nullable result_checking cannot be null');
        }
        $this->container['result_checking'] = $result_checking;

        return $this;
    }

    /**
     * Gets assigner
     *
     * @return \OpenAPI\Client\Model\PersonRequest|null
     */
    public function getAssigner()
    {
        return $this->container['assigner'];
    }

    /**
     * Sets assigner
     *
     * @param \OpenAPI\Client\Model\PersonRequest|null $assigner assigner
     *
     * @return self
     */
    public function setAssigner($assigner)
    {
        if (is_null($assigner)) {
            throw new \InvalidArgumentException('non-nullable assigner cannot be null');
        }
        $this->container['assigner'] = $assigner;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return \OpenAPI\Client\Model\BaseEntity|null
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param \OpenAPI\Client\Model\BaseEntity|null $parent parent
     *
     * @return self
     */
    public function setParent($parent)
    {
        if (is_null($parent)) {
            throw new \InvalidArgumentException('non-nullable parent cannot be null');
        }
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets template
     *
     * @return \OpenAPI\Client\Model\BaseEntity|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param \OpenAPI\Client\Model\BaseEntity|null $template template
     *
     * @return self
     */
    public function setTemplate($template)
    {
        if (is_null($template)) {
            throw new \InvalidArgumentException('non-nullable template cannot be null');
        }
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \OpenAPI\Client\Model\BaseEntity|null
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \OpenAPI\Client\Model\BaseEntity|null $project project
     *
     * @return self
     */
    public function setProject($project)
    {
        if (is_null($project)) {
            throw new \InvalidArgumentException('non-nullable project cannot be null');
        }
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets counterparty
     *
     * @return \OpenAPI\Client\Model\PersonRequest|null
     */
    public function getCounterparty()
    {
        return $this->container['counterparty'];
    }

    /**
     * Sets counterparty
     *
     * @param \OpenAPI\Client\Model\PersonRequest|null $counterparty counterparty
     *
     * @return self
     */
    public function setCounterparty($counterparty)
    {
        if (is_null($counterparty)) {
            throw new \InvalidArgumentException('non-nullable counterparty cannot be null');
        }
        $this->container['counterparty'] = $counterparty;

        return $this;
    }

    /**
     * Gets date_time
     *
     * @return \OpenAPI\Client\Model\TimePoint|null
     */
    public function getDateTime()
    {
        return $this->container['date_time'];
    }

    /**
     * Sets date_time
     *
     * @param \OpenAPI\Client\Model\TimePoint|null $date_time date_time
     *
     * @return self
     */
    public function setDateTime($date_time)
    {
        if (is_null($date_time)) {
            throw new \InvalidArgumentException('non-nullable date_time cannot be null');
        }
        $this->container['date_time'] = $date_time;

        return $this;
    }

    /**
     * Gets start_date_time
     *
     * @return \OpenAPI\Client\Model\TimePoint|null
     */
    public function getStartDateTime()
    {
        return $this->container['start_date_time'];
    }

    /**
     * Sets start_date_time
     *
     * @param \OpenAPI\Client\Model\TimePoint|null $start_date_time start_date_time
     *
     * @return self
     */
    public function setStartDateTime($start_date_time)
    {
        if (is_null($start_date_time)) {
            throw new \InvalidArgumentException('non-nullable start_date_time cannot be null');
        }
        $this->container['start_date_time'] = $start_date_time;

        return $this;
    }

    /**
     * Gets end_date_time
     *
     * @return \OpenAPI\Client\Model\TimePoint|null
     */
    public function getEndDateTime()
    {
        return $this->container['end_date_time'];
    }

    /**
     * Sets end_date_time
     *
     * @param \OpenAPI\Client\Model\TimePoint|null $end_date_time end_date_time
     *
     * @return self
     */
    public function setEndDateTime($end_date_time)
    {
        if (is_null($end_date_time)) {
            throw new \InvalidArgumentException('non-nullable end_date_time cannot be null');
        }
        $this->container['end_date_time'] = $end_date_time;

        return $this;
    }

    /**
     * Gets delayed_till_date
     *
     * @return \OpenAPI\Client\Model\TimePoint|null
     */
    public function getDelayedTillDate()
    {
        return $this->container['delayed_till_date'];
    }

    /**
     * Sets delayed_till_date
     *
     * @param \OpenAPI\Client\Model\TimePoint|null $delayed_till_date delayed_till_date
     *
     * @return self
     */
    public function setDelayedTillDate($delayed_till_date)
    {
        if (is_null($delayed_till_date)) {
            throw new \InvalidArgumentException('non-nullable delayed_till_date cannot be null');
        }
        $this->container['delayed_till_date'] = $delayed_till_date;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int|null $duration duration
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            throw new \InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets duration_unit
     *
     * @return string|null
     */
    public function getDurationUnit()
    {
        return $this->container['duration_unit'];
    }

    /**
     * Sets duration_unit
     *
     * @param string|null $duration_unit duration_unit
     *
     * @return self
     */
    public function setDurationUnit($duration_unit)
    {
        if (is_null($duration_unit)) {
            throw new \InvalidArgumentException('non-nullable duration_unit cannot be null');
        }
        $allowedValues = $this->getDurationUnitAllowableValues();
        if (!in_array($duration_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'duration_unit', must be one of '%s'",
                    $duration_unit,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['duration_unit'] = $duration_unit;

        return $this;
    }

    /**
     * Gets duration_type
     *
     * @return string|null
     */
    public function getDurationType()
    {
        return $this->container['duration_type'];
    }

    /**
     * Sets duration_type
     *
     * @param string|null $duration_type duration_type
     *
     * @return self
     */
    public function setDurationType($duration_type)
    {
        if (is_null($duration_type)) {
            throw new \InvalidArgumentException('non-nullable duration_type cannot be null');
        }
        $allowedValues = $this->getDurationTypeAllowableValues();
        if (!in_array($duration_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'duration_type', must be one of '%s'",
                    $duration_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['duration_type'] = $duration_type;

        return $this;
    }

    /**
     * Gets overdue
     *
     * @return bool|null
     */
    public function getOverdue()
    {
        return $this->container['overdue'];
    }

    /**
     * Sets overdue
     *
     * @param bool|null $overdue overdue
     *
     * @return self
     */
    public function setOverdue($overdue)
    {
        if (is_null($overdue)) {
            throw new \InvalidArgumentException('non-nullable overdue cannot be null');
        }
        $this->container['overdue'] = $overdue;

        return $this;
    }

    /**
     * Gets close_to_dead_line
     *
     * @return bool|null
     */
    public function getCloseToDeadLine()
    {
        return $this->container['close_to_dead_line'];
    }

    /**
     * Sets close_to_dead_line
     *
     * @param bool|null $close_to_dead_line close_to_dead_line
     *
     * @return self
     */
    public function setCloseToDeadLine($close_to_dead_line)
    {
        if (is_null($close_to_dead_line)) {
            throw new \InvalidArgumentException('non-nullable close_to_dead_line cannot be null');
        }
        $this->container['close_to_dead_line'] = $close_to_dead_line;

        return $this;
    }

    /**
     * Gets not_accepted_in_time
     *
     * @return bool|null
     */
    public function getNotAcceptedInTime()
    {
        return $this->container['not_accepted_in_time'];
    }

    /**
     * Sets not_accepted_in_time
     *
     * @param bool|null $not_accepted_in_time not_accepted_in_time
     *
     * @return self
     */
    public function setNotAcceptedInTime($not_accepted_in_time)
    {
        if (is_null($not_accepted_in_time)) {
            throw new \InvalidArgumentException('non-nullable not_accepted_in_time cannot be null');
        }
        $this->container['not_accepted_in_time'] = $not_accepted_in_time;

        return $this;
    }

    /**
     * Gets in_favorites
     *
     * @return bool|null
     */
    public function getInFavorites()
    {
        return $this->container['in_favorites'];
    }

    /**
     * Sets in_favorites
     *
     * @param bool|null $in_favorites in_favorites
     *
     * @return self
     */
    public function setInFavorites($in_favorites)
    {
        if (is_null($in_favorites)) {
            throw new \InvalidArgumentException('non-nullable in_favorites cannot be null');
        }
        $this->container['in_favorites'] = $in_favorites;

        return $this;
    }

    /**
     * Gets is_summary
     *
     * @return bool|null
     */
    public function getIsSummary()
    {
        return $this->container['is_summary'];
    }

    /**
     * Sets is_summary
     *
     * @param bool|null $is_summary is_summary
     *
     * @return self
     */
    public function setIsSummary($is_summary)
    {
        if (is_null($is_summary)) {
            throw new \InvalidArgumentException('non-nullable is_summary cannot be null');
        }
        $this->container['is_summary'] = $is_summary;

        return $this;
    }

    /**
     * Gets is_sequential
     *
     * @return bool|null
     */
    public function getIsSequential()
    {
        return $this->container['is_sequential'];
    }

    /**
     * Sets is_sequential
     *
     * @param bool|null $is_sequential is_sequential
     *
     * @return self
     */
    public function setIsSequential($is_sequential)
    {
        if (is_null($is_sequential)) {
            throw new \InvalidArgumentException('non-nullable is_sequential cannot be null');
        }
        $this->container['is_sequential'] = $is_sequential;

        return $this;
    }

    /**
     * Gets assignees
     *
     * @return \OpenAPI\Client\Model\PeopleRequest|null
     */
    public function getAssignees()
    {
        return $this->container['assignees'];
    }

    /**
     * Sets assignees
     *
     * @param \OpenAPI\Client\Model\PeopleRequest|null $assignees assignees
     *
     * @return self
     */
    public function setAssignees($assignees)
    {
        if (is_null($assignees)) {
            throw new \InvalidArgumentException('non-nullable assignees cannot be null');
        }
        $this->container['assignees'] = $assignees;

        return $this;
    }

    /**
     * Gets participants
     *
     * @return \OpenAPI\Client\Model\PeopleRequest|null
     */
    public function getParticipants()
    {
        return $this->container['participants'];
    }

    /**
     * Sets participants
     *
     * @param \OpenAPI\Client\Model\PeopleRequest|null $participants participants
     *
     * @return self
     */
    public function setParticipants($participants)
    {
        if (is_null($participants)) {
            throw new \InvalidArgumentException('non-nullable participants cannot be null');
        }
        $this->container['participants'] = $participants;

        return $this;
    }

    /**
     * Gets auditors
     *
     * @return \OpenAPI\Client\Model\PeopleRequest|null
     */
    public function getAuditors()
    {
        return $this->container['auditors'];
    }

    /**
     * Sets auditors
     *
     * @param \OpenAPI\Client\Model\PeopleRequest|null $auditors auditors
     *
     * @return self
     */
    public function setAuditors($auditors)
    {
        if (is_null($auditors)) {
            throw new \InvalidArgumentException('non-nullable auditors cannot be null');
        }
        $this->container['auditors'] = $auditors;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted is_deleted
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {
        if (is_null($is_deleted)) {
            throw new \InvalidArgumentException('non-nullable is_deleted cannot be null');
        }
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets custom_field_data
     *
     * @return \OpenAPI\Client\Model\CustomFieldValueRequest[]|null
     */
    public function getCustomFieldData()
    {
        return $this->container['custom_field_data'];
    }

    /**
     * Sets custom_field_data
     *
     * @param \OpenAPI\Client\Model\CustomFieldValueRequest[]|null $custom_field_data custom_field_data
     *
     * @return self
     */
    public function setCustomFieldData($custom_field_data)
    {
        if (is_null($custom_field_data)) {
            throw new \InvalidArgumentException('non-nullable custom_field_data cannot be null');
        }
        $this->container['custom_field_data'] = $custom_field_data;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \OpenAPI\Client\Model\FileRequest[]|null
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \OpenAPI\Client\Model\FileRequest[]|null $files files
     *
     * @return self
     */
    public function setFiles($files)
    {
        if (is_null($files)) {
            throw new \InvalidArgumentException('non-nullable files cannot be null');
        }
        $this->container['files'] = $files;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


